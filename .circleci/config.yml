version: 2.1

# Generic build job
build: &build
  working_directory: ~/shabad-os
  steps:
    - checkout
    - run:
        name: Install dependencies
        command: npm install --unsafe-perm
    - run:
        name: Build application
        command: npm run build
    - run:
        name: Build binaries
        command: npm run dist -- -${PLATFORM_FLAG}
        no_output_timeout: 30m
    - run: mkdir artifacts && cp dist/Shabad* artifacts
    - store_artifacts:
        path: artifacts
        destination: artifacts

# Generic publish job
publish: &publish
  working_directory: ~/shabad-os
  steps:
    - checkout
    - run:
        name: Install dependencies
        command: npm install --unsafe-perm
    - run:
        name: Build application
        command: npm run build
    - run: 
        name: Determine if pre-release
        command: |-
          (cat app/package.json | grep -Eq '"version": ".+\..+\..+-.*"') && EP_PRE_RELEASE=true || true
    - run:
        name: Publish application
        command: GH_TOKEN=$GITHUB_TOKEN npm run release -- -${PLATFORM_FLAG} -p always
        no_output_timeout: 30m
    - run: mkdir artifacts && cp dist/Shabad* artifacts
    - store_artifacts:
        path: artifacts
        destination: artifacts

orbs:
  windows: circleci/windows@2.1.0

jobs:
  lint:
    docker:
      - image: node:10
    working_directory: ~/shabad-os
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: npm install --unsafe-perm
      - run:
          name: Run ESLint on Frontend & Backend
          command: npm run lint
  
  build-mac:
    <<: *build
    macos:
      xcode: "11.2.0"
    environment:
      PLATFORM_FLAG: "m"

  build-linux:
    <<: *build
    docker:
      - image: electronuserland/builder
    environment:
      USE_HARD_LINKS: false
      PLATFORM_FLAG: "l"

  build-windows:
    <<: *build
    executor:
      name: windows/default
      shell: bash.exe
    environment:
      USE_HARD_LINKS: false
      PLATFORM_FLAG: "w"

  publish-mac:
    <<: *publish
    macos:
      xcode: "11.2.0"
    environment:
      PLATFORM_FLAG: "m"

  publish-linux:
    <<: *publish
    docker:
      - image: electronuserland/builder
    environment:
      USE_HARD_LINKS: false
      PLATFORM_FLAG: "l"

  publish-windows:
    <<: *publish
    executor:
      name: windows/default
      shell: bash.exe
    environment:
      USE_HARD_LINKS: false
      PLATFORM_FLAG: "w"

  tag-sentry:
    docker:
      - image: getsentry/sentry-cli
    working_directory: ~/work
    steps:
      - checkout
      - run: |
          # Download JQ
          apk --no-cache add jq

          # Extract version
          VERSION=$(cat app/package.json | jq .version)
          
          # Tag and finalise commits
          sentry-cli releases new -p desktop-backend -p desktop-frontend $VERSION
          sentry-cli releases set-commits --auto $VERSION
          sentry-cli releases finalize VERSION

## Workflow

build-workflow: &build-workflow
  requires:
    - lint
  filters:
    branches:
      ignore:
        - master

publish-workflow: &publish-workflow
  requires:
    - lint
  filters:
    branches:
      only:
        - master

workflows:
  version: 2
  build-desktop:
    jobs:
      - lint

      - build-windows:
          <<: *build-workflow
          pre-steps:
            - run: npm install --global --production windows-build-tools --vs2015
      - build-mac:
          <<: *build-workflow
          pre-steps:
            - run: sudo xcode-select -r
      - build-linux:
          <<: *build-workflow


      - publish-windows:
          <<: *publish-workflow
          pre-steps:
            - run: npm install --global --production windows-build-tools --vs2015
      - publish-mac:
          <<: *publish-workflow
          pre-steps:
            - run: sudo xcode-select -r
      - publish-linux:
          <<: *publish-workflow


      - tag-sentry:
          requires:
            - publish-windows
            - publish-linux
            - publish-mac